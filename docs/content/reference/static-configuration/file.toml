[global]
  checkNewVersion = true
  sendAnonymousUsage = true

[serversTransport]
  insecureSkipVerify = true
  rootCAs = ["foobar", "foobar"]
  maxIdleConnsPerHost = 42
  [serversTransport.forwardingTimeouts]
    dialTimeout = "42s"
    responseHeaderTimeout = "42s"
    idleConnTimeout = "42s"

[entryPoints]
  [entryPoints.EntryPoint0]
    address = "foobar"
    asDefault = true
    [entryPoints.EntryPoint0.transport]
      [entryPoints.EntryPoint0.transport.lifeCycle]
        requestAcceptGraceTimeout = "42s"
        graceTimeOut = "42s"
      [entryPoints.EntryPoint0.transport.respondingTimeouts]
        readTimeout = "42s"
        writeTimeout = "42s"
        idleTimeout = "42s"
    [entryPoints.EntryPoint0.proxyProtocol]
      insecure = true
      trustedIPs = ["foobar", "foobar"]
    [entryPoints.EntryPoint0.forwardedHeaders]
      insecure = true
      trustedIPs = ["foobar", "foobar"]
    [entryPoints.EntryPoint0.http]
      middlewares = ["foobar", "foobar"]
      [entryPoints.EntryPoint0.http.redirections]
        [entryPoints.EntryPoint0.http.redirections.entryPoint]
          to = "foobar"
          scheme = "foobar"
          permanent = true
          priority = 42
      [entryPoints.EntryPoint0.http.tls]
        options = "foobar"
        certResolver = "foobar"

        [[entryPoints.EntryPoint0.http.tls.domains]]
          main = "foobar"
          sans = ["foobar", "foobar"]

        [[entryPoints.EntryPoint0.http.tls.domains]]
          main = "foobar"
          sans = ["foobar", "foobar"]
    [entryPoints.EntryPoint0.http2]
      maxConcurrentStreams = 42
    [entryPoints.EntryPoint0.http3]
      advertisedPort = 42
    [entryPoints.EntryPoint0.udp]
      timeout = "42s"

[providers]
  providersThrottleDuration = "42s"
  [providers.docker]
    constraints = "foobar"
    watch = true
    endpoint = "foobar"
    defaultRule = "foobar"
    exposedByDefault = true
    useBindPortIP = true
    swarmMode = true
    network = "foobar"
    swarmModeRefreshSeconds = "42s"
    httpClientTimeout = "42s"
    allowEmptyServices = true
    [providers.docker.tls]
      ca = "foobar"
      cert = "foobar"
      key = "foobar"
      insecureSkipVerify = true
  [providers.file]
    directory = "foobar"
    watch = true
    filename = "foobar"
    debugLogGeneratedTemplate = true
  [providers.marathon]
    constraints = "foobar"
    trace = true
    watch = true
    endpoint = "foobar"
    defaultRule = "foobar"
    exposedByDefault = true
    dcosToken = "foobar"
    dialerTimeout = "42s"
    responseHeaderTimeout = "42s"
    tlsHandshakeTimeout = "42s"
    keepAlive = "42s"
    forceTaskHostname = true
    respectReadinessChecks = true
    [providers.marathon.tls]
      ca = "foobar"
      cert = "foobar"
      key = "foobar"
      insecureSkipVerify = true
    [providers.marathon.basic]
      httpBasicAuthUser = "foobar"
      httpBasicPassword = "foobar"
  [providers.kubernetesIngress]
    endpoint = "foobar"
    token = "foobar"
    certAuthFilePath = "foobar"
    namespaces = ["foobar", "foobar"]
    labelSelector = "foobar"
    ingressClass = "foobar"
    throttleDuration = "42s"
    allowEmptyServices = true
    allowExternalNameServices = true
    [providers.kubernetesIngress.ingressEndpoint]
      ip = "foobar"
      hostname = "foobar"
      publishedService = "foobar"
  [providers.kubernetesCRD]
    endpoint = "foobar"
    token = "foobar"
    certAuthFilePath = "foobar"
    namespaces = ["foobar", "foobar"]
    allowCrossNamespace = true
    allowExternalNameServices = true
    labelSelector = "foobar"
    ingressClass = "foobar"
    throttleDuration = "42s"
    allowEmptyServices = true
  [providers.kubernetesGateway]
    endpoint = "foobar"
    token = "foobar"
    certAuthFilePath = "foobar"
    namespaces = ["foobar", "foobar"]
    labelSelector = "foobar"
    throttleDuration = "42s"
  [providers.rest]
    insecure = true
  [providers.rancher]
    constraints = "foobar"
    watch = true
    defaultRule = "foobar"
    exposedByDefault = true
    enableServiceHealthFilter = true
    refreshSeconds = 42
    intervalPoll = true
    prefix = "foobar"
  [providers.consulCatalog]
    constraints = "foobar"
    prefix = "foobar"
    refreshInterval = "42s"
    requireConsistent = true
    stale = true
    cache = true
    exposedByDefault = true
    defaultRule = "foobar"
    connectAware = true
    connectByDefault = true
    serviceName = "foobar"
    watch = true
    namespaces = ["foobar", "foobar"]
    [providers.consulCatalog.endpoint]
      address = "foobar"
      scheme = "foobar"
      datacenter = "foobar"
      token = "foobar"
      endpointWaitTime = "42s"
      [providers.consulCatalog.endpoint.tls]
        ca = "foobar"
        cert = "foobar"
        key = "foobar"
        insecureSkipVerify = true
      [providers.consulCatalog.endpoint.httpAuth]
        username = "foobar"
        password = "foobar"
  [providers.nomad]
    defaultRule = "foobar"
    constraints = "foobar"
    prefix = "foobar"
    stale = true
    namespaces = ["foobar", "foobar"]
    exposedByDefault = true
    refreshInterval = "42s"
    [providers.nomad.endpoint]
      address = "foobar"
      region = "foobar"
      token = "foobar"
      endpointWaitTime = "42s"
      [providers.nomad.endpoint.tls]
        ca = "foobar"
        cert = "foobar"
        key = "foobar"
        insecureSkipVerify = true
  [providers.ecs]
    constraints = "foobar"
    exposedByDefault = true
    refreshSeconds = 42
    defaultRule = "foobar"
    clusters = ["foobar", "foobar"]
    autoDiscoverClusters = true
    region = "foobar"
    accessKeyID = "foobar"
    secretAccessKey = "foobar"
    ecsAnywhere = true
    healthyTasksOnly = true
  [providers.consul]
    rootKey = "foobar"
    endpoints = ["foobar", "foobar"]
    token = "foobar"
    namespaces = ["foobar", "foobar"]
    [providers.consul.tls]
      ca = "foobar"
      cert = "foobar"
      key = "foobar"
      insecureSkipVerify = true
  [providers.etcd]
    rootKey = "foobar"
    endpoints = ["foobar", "foobar"]
    username = "foobar"
    password = "foobar"
    [providers.etcd.tls]
      ca = "foobar"
      cert = "foobar"
      key = "foobar"
      insecureSkipVerify = true
  [providers.zooKeeper]
    rootKey = "foobar"
    endpoints = ["foobar", "foobar"]
    username = "foobar"
    password = "foobar"
  [providers.redis]
    rootKey = "foobar"
    endpoints = ["foobar", "foobar"]
    username = "foobar"
    password = "foobar"
    db = 42
    [providers.redis.tls]
      ca = "foobar"
      cert = "foobar"
      key = "foobar"
      insecureSkipVerify = true
  [providers.http]
    endpoint = "foobar"
    pollInterval = "42s"
    pollTimeout = "42s"
    [providers.http.headers]
      name0 = "foobar"
      name1 = "foobar"
    [providers.http.tls]
      ca = "foobar"
      cert = "foobar"
      key = "foobar"
      insecureSkipVerify = true
  [providers.plugin]
    [providers.plugin.Descriptor0]
    [providers.plugin.Descriptor1]

[api]
  insecure = true
  dashboard = true
  debug = true

[metrics]
  [metrics.prometheus]
    buckets = [42.0, 42.0]
    addEntryPointsLabels = true
    addRoutersLabels = true
    addServicesLabels = true
    entryPoint = "foobar"
    manualRouting = true
  [metrics.datadog]
    address = "foobar"
    pushInterval = "42s"
    addEntryPointsLabels = true
    addRoutersLabels = true
    addServicesLabels = true
    prefix = "foobar"
  [metrics.statsD]
    address = "foobar"
    pushInterval = "42s"
    addEntryPointsLabels = true
    addRoutersLabels = true
    addServicesLabels = true
    prefix = "foobar"
  [metrics.influxDB]
    address = "foobar"
    protocol = "foobar"
    pushInterval = "42s"
    database = "foobar"
    retentionPolicy = "foobar"
    username = "foobar"
    password = "foobar"
    addEntryPointsLabels = true
    addRoutersLabels = true
    addServicesLabels = true
    [metrics.influxDB.additionalLabels]
      name0 = "foobar"
      name1 = "foobar"
  [metrics.influxDB2]
    address = "foobar"
    token = "foobar"
    pushInterval = "42s"
    org = "foobar"
    bucket = "foobar"
    addEntryPointsLabels = true
    addRoutersLabels = true
    addServicesLabels = true
    [metrics.influxDB2.additionalLabels]
      name0 = "foobar"
      name1 = "foobar"
  [metrics.openTelemetry]
    address = "foobar"
    addEntryPointsLabels = true
    addRoutersLabels = true
    addServicesLabels = true
    pushInterval = "42s"
    path = "foobar"
    explicitBoundaries =  [42.0, 42.0]
    insecure = true
    [metrics.openTelemetry.headers]
      name0 = "foobar"
      name1 = "foobar"
    [metrics.openTelemetry.tls]
      ca = "foobar"
      caOptional = true
      cert = "foobar"
      insecureSkipVerify = true
      key = "foobar"
    [metrics.openTelemetry.grpc]

[ping]
  entryPoint = "foobar"
  manualRouting = true
  terminatingStatusCode = 42

[log]
  level = "foobar"
  format = "foobar"
  noColor = true
  filePath = "foobar"
  maxSize = 42
  maxBackups = 42
  maxAge = 42
  compress = true

[accessLog]
  filePath = "foobar"
  format = "foobar"
  bufferingSize = 42
  [accessLog.filters]
    statusCodes = ["foobar", "foobar"]
    retryAttempts = true
    minDuration = "42s"
  [accessLog.fields]
    defaultMode = "foobar"
    [accessLog.fields.names]
      name0 = "foobar"
      name1 = "foobar"
    [accessLog.fields.headers]
      defaultMode = "foobar"
      [accessLog.fields.headers.names]
        name0 = "foobar"
        name1 = "foobar"

[tracing]
  serviceName = "foobar"
  spanNameLimit = 42
  [tracing.jaeger]
    samplingServerURL = "foobar"
    samplingType = "foobar"
    samplingParam = 42.0
    localAgentHostPort = "foobar"
    gen128Bit = true
    propagation = "foobar"
    traceContextHeaderName = "foobar"
    disableAttemptReconnecting = true
    [tracing.jaeger.collector]
      endpoint = "foobar"
      user = "foobar"
      password = "foobar"
  [tracing.zipkin]
    httpEndpoint = "foobar"
    sameSpan = true
    id128Bit = true
    sampleRate = 42.0
  [tracing.datadog]
    localAgentHostPort = "foobar"
    [tracing.datadog.globalTags]
      tag1 = "foobar"
      tag2 = "foobar"
    debug = true
    prioritySampling = true
    traceIDHeaderName = "foobar"
    parentIDHeaderName = "foobar"
    samplingPriorityHeaderName = "foobar"
    bagagePrefixHeaderName = "foobar"
  [tracing.instana]
    localAgentHost = "foobar"
    localAgentPort = 42
    logLevel = "foobar"
    enableAutoProfile = true
  [tracing.haystack]
    localAgentHost = "foobar"
    localAgentPort = 42
    globalTag = "foobar"
    traceIDHeaderName = "foobar"
    parentIDHeaderName = "foobar"
    spanIDHeaderName = "foobar"
    baggagePrefixHeaderName = "foobar"
  [tracing.elastic]
    serverURL = "foobar"
    secretToken = "foobar"
    serviceEnvironment = "foobar"
  [tracing.openTelemetry]
    address = "foobar"
    insecure = true
    path = "foobar"
    [tracing.openTelemetry.headers]
      name0 = "foobar"
      name1 = "foobar"
    [tracing.openTelemetry.tls]
      ca = "foobar"
      caOptional = true
      cert = "foobar"
      key = "foobar"
      insecureSkipVerify = true
    [tracing.openTelemetry.grpc]

[hostResolver]
  cnameFlattening = true
  resolvConfig = "foobar"
  resolvDepth = 42

[certificatesResolvers]
  [certificatesResolvers.CertificateResolver0]
    [certificatesResolvers.CertificateResolver0.acme]
      email = "foobar"
      caServer = "foobar"
      preferredChain = "foobar"
      storage = "foobar"
      keyType = "foobar"
      certificatesDuration = 42
      [certificatesResolvers.CertificateResolver0.acme.eab]
        kid = "foobar"
        hmacEncoded = "foobar"
      [certificatesResolvers.CertificateResolver0.acme.dnsChallenge]
        provider = "foobar"
        delayBeforeCheck = "42s"
        resolvers = ["foobar", "foobar"]
        disablePropagationCheck = true
      [certificatesResolvers.CertificateResolver0.acme.httpChallenge]
        entryPoint = "foobar"
      [certificatesResolvers.CertificateResolver0.acme.tlsChallenge]
  [certificatesResolvers.CertificateResolver1.tailscale]

[hub]
  [hub.tls]
    insecure = true
    ca = "foobar"
    cert = "foobar"
    key = "foobar"

[experimental]
  kubernetesGateway = true
  hub = true
  [experimental.plugins]
    [experimental.plugins.Descriptor0]
      moduleName = "foobar"
      version = "foobar"
    [experimental.plugins.Descriptor1]
      moduleName = "foobar"
      version = "foobar"
  [experimental.localPlugins]
    [experimental.localPlugins.Descriptor0]
      moduleName = "foobar"
    [experimental.localPlugins.Descriptor1]
      moduleName = "foobar"
